apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    metadata:
      labels:
        nodepool: default
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      requirements:
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]
        - key: node.kubernetes.io/instance-type
          operator: In
          values: ["t3a.medium"]
  limits:
    cpu: 100
    memory: 100Gi
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 10s
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  amiSelectorTerms:
    - alias: al2@latest 
  amiFamily: AL2         
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "andi-eks-cluster"
        Type: "Private"
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "andi-eks-cluster"
  instanceProfile: "andi-eks-cluster-karpenter-node"
  tags:
    Name: "GameCon-karpenter-node"
    Environment: "development"
    Project: "gamecon"
    Owner: "andi"
    ManagedBy: "karpenter"
    NodeType: "auto-scaling"
    NodePool: "{{.NodePoolName}}"
    CostCenter: "engineering"
    CreatedBy: "karpenter-controller"